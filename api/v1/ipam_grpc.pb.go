// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpamServiceClient is the client API for IpamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpamServiceClient interface {
	CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error)
	DeletePrefix(ctx context.Context, in *DeletePrefixRequest, opts ...grpc.CallOption) (*DeletePrefixResponse, error)
	GetPrefix(ctx context.Context, in *GetPrefixRequest, opts ...grpc.CallOption) (*GetPrefixResponse, error)
	AcquireChildPrefix(ctx context.Context, in *AcquireChildPrefixRequest, opts ...grpc.CallOption) (*AcquireChildPrefixResponse, error)
	ReleaseChildPrefix(ctx context.Context, in *ReleaseChildPrefixRequest, opts ...grpc.CallOption) (*ReleaseChildPrefixResponse, error)
	AcquireIP(ctx context.Context, in *AcquireIPRequest, opts ...grpc.CallOption) (*AcquireIPResponse, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPResponse, error)
}

type ipamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpamServiceClient(cc grpc.ClientConnInterface) IpamServiceClient {
	return &ipamServiceClient{cc}
}

func (c *ipamServiceClient) CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error) {
	out := new(CreatePrefixResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/CreatePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) DeletePrefix(ctx context.Context, in *DeletePrefixRequest, opts ...grpc.CallOption) (*DeletePrefixResponse, error) {
	out := new(DeletePrefixResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/DeletePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) GetPrefix(ctx context.Context, in *GetPrefixRequest, opts ...grpc.CallOption) (*GetPrefixResponse, error) {
	out := new(GetPrefixResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/GetPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) AcquireChildPrefix(ctx context.Context, in *AcquireChildPrefixRequest, opts ...grpc.CallOption) (*AcquireChildPrefixResponse, error) {
	out := new(AcquireChildPrefixResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/AcquireChildPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) ReleaseChildPrefix(ctx context.Context, in *ReleaseChildPrefixRequest, opts ...grpc.CallOption) (*ReleaseChildPrefixResponse, error) {
	out := new(ReleaseChildPrefixResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/ReleaseChildPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) AcquireIP(ctx context.Context, in *AcquireIPRequest, opts ...grpc.CallOption) (*AcquireIPResponse, error) {
	out := new(AcquireIPResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/AcquireIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPResponse, error) {
	out := new(ReleaseIPResponse)
	err := c.cc.Invoke(ctx, "/api.v1.IpamService/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpamServiceServer is the server API for IpamService service.
// All implementations should embed UnimplementedIpamServiceServer
// for forward compatibility
type IpamServiceServer interface {
	CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error)
	DeletePrefix(context.Context, *DeletePrefixRequest) (*DeletePrefixResponse, error)
	GetPrefix(context.Context, *GetPrefixRequest) (*GetPrefixResponse, error)
	AcquireChildPrefix(context.Context, *AcquireChildPrefixRequest) (*AcquireChildPrefixResponse, error)
	ReleaseChildPrefix(context.Context, *ReleaseChildPrefixRequest) (*ReleaseChildPrefixResponse, error)
	AcquireIP(context.Context, *AcquireIPRequest) (*AcquireIPResponse, error)
	ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPResponse, error)
}

// UnimplementedIpamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIpamServiceServer struct {
}

func (UnimplementedIpamServiceServer) CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrefix not implemented")
}
func (UnimplementedIpamServiceServer) DeletePrefix(context.Context, *DeletePrefixRequest) (*DeletePrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrefix not implemented")
}
func (UnimplementedIpamServiceServer) GetPrefix(context.Context, *GetPrefixRequest) (*GetPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefix not implemented")
}
func (UnimplementedIpamServiceServer) AcquireChildPrefix(context.Context, *AcquireChildPrefixRequest) (*AcquireChildPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireChildPrefix not implemented")
}
func (UnimplementedIpamServiceServer) ReleaseChildPrefix(context.Context, *ReleaseChildPrefixRequest) (*ReleaseChildPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseChildPrefix not implemented")
}
func (UnimplementedIpamServiceServer) AcquireIP(context.Context, *AcquireIPRequest) (*AcquireIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireIP not implemented")
}
func (UnimplementedIpamServiceServer) ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIP not implemented")
}

// UnsafeIpamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpamServiceServer will
// result in compilation errors.
type UnsafeIpamServiceServer interface {
	mustEmbedUnimplementedIpamServiceServer()
}

func RegisterIpamServiceServer(s grpc.ServiceRegistrar, srv IpamServiceServer) {
	s.RegisterService(&IpamService_ServiceDesc, srv)
}

func _IpamService_CreatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).CreatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/CreatePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).CreatePrefix(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_DeletePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).DeletePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/DeletePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).DeletePrefix(ctx, req.(*DeletePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_GetPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).GetPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/GetPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).GetPrefix(ctx, req.(*GetPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_AcquireChildPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireChildPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).AcquireChildPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/AcquireChildPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).AcquireChildPrefix(ctx, req.(*AcquireChildPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_ReleaseChildPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseChildPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ReleaseChildPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/ReleaseChildPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ReleaseChildPrefix(ctx, req.(*ReleaseChildPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_AcquireIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).AcquireIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/AcquireIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).AcquireIP(ctx, req.(*AcquireIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.IpamService/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ReleaseIP(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpamService_ServiceDesc is the grpc.ServiceDesc for IpamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.IpamService",
	HandlerType: (*IpamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrefix",
			Handler:    _IpamService_CreatePrefix_Handler,
		},
		{
			MethodName: "DeletePrefix",
			Handler:    _IpamService_DeletePrefix_Handler,
		},
		{
			MethodName: "GetPrefix",
			Handler:    _IpamService_GetPrefix_Handler,
		},
		{
			MethodName: "AcquireChildPrefix",
			Handler:    _IpamService_AcquireChildPrefix_Handler,
		},
		{
			MethodName: "ReleaseChildPrefix",
			Handler:    _IpamService_ReleaseChildPrefix_Handler,
		},
		{
			MethodName: "AcquireIP",
			Handler:    _IpamService_AcquireIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _IpamService_ReleaseIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/ipam.proto",
}
